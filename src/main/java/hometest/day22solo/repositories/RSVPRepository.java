package hometest.day22solo.repositories;

import java.math.BigInteger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.LinkedList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Repository;

import hometest.day22solo.models.RSVP;
import hometest.day22solo.models.RSVPTotalCountMapper;

import static hometest.day22solo.repositories.Queries.*;

@Repository
public class RSVPRepository {

    @Autowired JdbcTemplate jdbcTemplate;

    //GET METHOD 1 -- searching by name -- if no param return all the rows in json format
    public List<RSVP> getAllRSVPByName(String q){

        //create an empty list
        final List<RSVP> rsvps= new LinkedList<>();

        //create am empty sql rowset
        SqlRowSet rs = null;

        //print out the query entered by the user to check that it has gone through to this stage at least
        System.out.println("This is the query name entered by the user--> "+q);

        //query for the rowsets
        if(q==null){
            rs=jdbcTemplate.queryForRowSet(SQL_SELECT_ALL_RSVPROWS);
        }

        else{ rs=jdbcTemplate.queryForRowSet(SQL_SELECT_RSVP_BY_NAME, q);}

        //turn each rowset into an RSVP object and add it into the RSVP List
        while(rs.next()){
            rsvps.add(RSVP.createFromSQLRowSetToRSVP(rs));
        }

        return rsvps;

    }

    //GET METHOD 2 -- searching by email
    public List<RSVP> getByEmail(String emailInput){
        
        final List<RSVP> listzxc = new LinkedList<>();
        
        SqlRowSet rs = null;

        System.out.println("this is the email input by the user--> "+emailInput);

        if(emailInput==null){
            rs = jdbcTemplate.queryForRowSet(SQL_SELECT_ALL_RSVPROWS);
        }
        else{
            rs=jdbcTemplate.queryForRowSet(SQL_SELECT_RSVP_BY_EMAIL, emailInput);
        }

        //turn each rowset into a list
        while(rs.next()){
            listzxc.add(RSVP.createFromSQLRowSetToRSVP(rs));
        }

        return listzxc;

    }

    //PUT METHOD 1 -- updating a single row by email
    //returns a boolean true or false depending if operation is completed successfully or not -- see the > 0 part
    public boolean updateRSVPByEmail(final RSVP rsvpRow){
        return jdbcTemplate.update(SQL_UPDATE_RSVP_BY_EMAIL,
                rsvpRow.getName(),
                rsvpRow.getPhone(),
                new Timestamp(rsvpRow.getConfirmationDate().toDateTime().getMillis()),
                rsvpRow.getComments(),
                rsvpRow.getEmail()) > 0;
    }
    

    //GET COUNT METHOD 1 -- count the total number of rows in the table, notice the square brackets after Object[]
    public Integer getTotalCount(){
        List<RSVP> rsvpList = jdbcTemplate.query(SQL_COUNT_TOTAL, new RSVPTotalCountMapper(), new Object[] {});

        return rsvpList.get(0).getTotalCount();
    }

    //POST METHOD 1 -- insert the row into the table -- if email already exists, update instead
    //TWO PARTS
    //PART A - check if the row with the paritcular email in the input json body already exists and return that
    //rowset in RSVP object format if it does
    //PART B - try inserting a row, if not use the PART A method and update the row instead


    //POST METHOD 1 PART A
    public RSVP searchTableByEmail(String email){
        //prevent inheritance
        final List<RSVP> rsvpList = new LinkedList<>();
        //perform the query
        final SqlRowSet rs = jdbcTemplate.queryForRowSet(SQL_SEARCH_RSVP_BY_EMAiL, email);

        //add each rowset into the List<RSVP>
        while(rs.next()){
            rsvpList.add(RSVP.createFromSQLRowSetToRSVP(rs));
        }

        //return the first RSVP object in the list
        return rsvpList.get(0);
    }

    //POST METHOD 1 PART B
    public RSVP insertRSVP(final RSVP rsvp){

        //create a keyholder which will hold the primary key AKA id which is generated by the database
        //in this case it is an id which autoincrements
        KeyHolder keyholder = new GeneratedKeyHolder();

        try {
        jdbcTemplate.update(connectionzxc -> {
            //create the prepared statement
            PreparedStatement ps = connectionzxc.prepareStatement(SQL_INSERT_RSVP, Statement.RETURN_GENERATED_KEYS);
            //set the values in the prepared statement to be inserted into the table
            ps.setString(1, rsvp.getName());
            ps.setString(2, rsvp.getEmail());
            ps.setString(3, rsvp.getPhone());
            System.out.println("Confirmation date > " + rsvp.getConfirmationDate());
            ps.setTimestamp(4, new Timestamp(rsvp.getConfirmationDate().toDateTime().getMillis()));
            ps.setString(5, rsvp.getComments());
            return ps;
        }, keyholder);
        
        //store the returned keyholder value into a BigInteger variable
        BigInteger primaryKeyValue = (BigInteger) keyholder.getKey();
        rsvp.setId(primaryKeyValue.intValue());
        System.out.println("this is the primary key value generated by the database-----> "+rsvp.getId());

        } 
        catch (DataIntegrityViolationException e) {
            RSVP existingRSVPRowObject = searchTableByEmail(rsvp.getEmail());
            existingRSVPRowObject.setComments(rsvp.getComments());
            existingRSVPRowObject.setName(rsvp.getName());
            existingRSVPRowObject.setPhone(rsvp.getPhone());
            existingRSVPRowObject.setConfirmationDate(rsvp.getConfirmationDate());
            
            if(updateRSVPByEmail(existingRSVPRowObject))
            rsvp.setId(existingRSVPRowObject.getId());
        }

        return rsvp;

        
    }

    public boolean insertRowEasy(String jsonBodyString){

        System.out.println("_____this is the beginning______");

            RSVP rsvpObject = null;
            Integer something = null;
            boolean updated = false;

        try {
            rsvpObject = RSVP.createStringJSONtoRsvp(jsonBodyString);
            
            Timestamp timeStampObject = new Timestamp(rsvpObject.getConfirmationDate().toDateTime().getMillis());
            
            System.out.println("----->HERE BEFORE UPDATE STATEMENT<------");

            something = jdbcTemplate.update(EASYPOST, rsvpObject.getName(), rsvpObject.getEmail(), rsvpObject.getPhone(), timeStampObject, rsvpObject.getComments());

            System.out.println("----->HERE AFTER UPDATE STATEMENT<------"+something);

            System.out.println("THIS is the result that returnssssss------>>>" + something);
            //if updated, jdbctemplate.update() method will return the number of rows affected, so if more than 0, something has been updated
            if(something>0){updated=true;}
            
        } 
        
        catch (Exception e) {
            e.printStackTrace();
        }
        
        return updated;
        
    }
}
